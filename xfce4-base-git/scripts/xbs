#!/bin/bash

msg ()
{
  local mesg=$1; shift
  printf "\033[1;32m==>\033[1;0m\033[1;1m ${mesg}\033[1;0m\n" "$@" >&2
}

plain ()
{
  local mesg=$1; shift
  printf "\033[1;1m    ${mesg}\033[1;0m\n" "$@" >&2
}

error ()
{
  local mesg=$1; shift
  printf "\033[1;31m==> ERROR:\033[1;0m\033[1;1m ${mesg}\033[1;0m\n" "$@" >&2
}

create_package ()
{
  cd $1/pkg || exit 1

  msg "Removing libtool .la files"
  find . ! -type d -name "*.la" -exec rm -f -- '{}' \;

  # Create package info
  msg "Creating package"
  local builddate=$(date -u "+%s")
  if [ -n "$PACKAGER" ]; then
    local packager="$PACKAGER"
  else
    local packager="Unknown Packager"
  fi
  local size=$(du -sk | awk '{print $1 * 1024}')
  echo "# Generated by Xfce Build System" >.PKGINFO
  echo "# $(LC_ALL=C date -u)" >>.PKGINFO
  echo "pkgname = $xbs_pkgname" >>.PKGINFO
  echo "pkgver = $xbs_pkgver-$xbs_repo" >>.PKGINFO
  echo "pkgdesc = $2 XBS package" >>.PKGINFO
  echo "builddate = $builddate" >>.PKGINFO
  echo "packager = $packager" >>.PKGINFO
  echo "size = $size" >>.PKGINFO
  echo "license = GPL" >>.PKGINFO
  echo "arch = i686" >>.PKGINFO
  echo "group = xfce4-git" >>.PKGINFO
  echo "url = http://www.xfce.org" >>.PKGINFO
  echo "arch = $CARCH" >>.PKGINFO

  # Compress
  local pkg_file="$1/$xbs_pkgname-$xbs_pkgver-$xbs_repo-${CARCH}.pkg.tar.gz"
  shopt -s nullglob
  bsdtar -zcf - .PKGINFO * > "$pkg_file"
  shopt -u nullglob
}

strip_symbols ()
{
  msg "Stripping debugging symbols from binaries and libraries"
  local binary
  cd $1
  find ${STRIP_DIRS[@]} -type f 2>/dev/null | while read binary ; do
    case "$(file -biz "$binary")" in
      *compressed-encoding*)      # Skip compressed binaries
        ;;
      *application/x-sharedlib*)  # Libraries (.so)
        /usr/bin/strip -S "$binary";;
      *application/x-archive*)    # Libraries (.a)
        /usr/bin/strip -S "$binary";;
      *application/x-executable*) # Binaries
        /usr/bin/strip "$binary";;
    esac
  done
}

march=$(uname -m)
march=${march/_/-}

# Additional compiler flags
#-Wwrite-strings  -Wnested-externs -Wunsafe-loop-optimizations -Waggregate-return
xbs_debug_flags="-march=$march -mtune=generic -O1 -g -ggdb -pipe -fstack-protector --param=ssp-buffer-size=4 -Wdisabled-optimization -fstrict-aliasing -Wstrict-aliasing -Wmissing-prototypes -DG_ENABLE_DEBUG"
xbs_prefix="/opt/xfce"
xbs_base=$(pwd)

# Some commands that don't need a git directory
if [ "$1" = "-c" -o "$1" = "--clean" ]; then
  # Remove all xbs directories in the tmp directory
  res=1 && rm -Rf /tmp/xbs* &> /dev/null && res=0
  if [ $res -eq 0 ]; then
    msg "Removed temporary directories"
  else
    error "Removing temporary directories failed"
  fi

  # List installed pacman packages
  msg "Packages installed that were build by this script"
  pacman -Qs "XBS"
  echo

  exit $res
elif [ "$1" = "-g" -o "$1" = "--git" ]; then
  # Cleanup and tune Xfce directories
  paths=$(find $MY_XFCE_GIT_DIR -maxdepth 1 -mindepth 1 -type d | sort)
  gitcmd="$2 $3 $4 $5 $6"

  if [ -z "$2" ]; then
    msg "Fetch data in $basedir"
    for path in $paths; do
      if [ -d "$path/.git" ]; then
        plain "${path#$basedir/}"
        cd $path && git fetch --quiet
      fi
    done

    msg "Pruning old remote repositories in $basedir"
    for path in $paths; do
      if [ -d "$path/.git" ]; then
        plain "${path#$basedir/}"
        cd $path && git remote prune origin
      fi
    done

    msg "Housekeeping in $basedir"
    for path in $paths; do
      if [ -d "$path/.git" ]; then
        plain "${path#$basedir/}"
        cd $path && git gc --prune=now --quiet
      fi
    done
  else
    msg "Run git $gitcmd data in $basedir"
    for path in $paths; do
      if [ -d "$path/.git" ]; then
        plain "${path#$basedir/}"
        cd $path && git $gitcmd
      fi
    done
  fi

  cd $xbs_base

  exit 0
fi

# Include makepkg.conf
source /etc/makepkg.conf
export CFLAGS CXXFLAGS LDFLAGS MAKEFLAGS CHOST

# Get the source directory and check if it looks like a package directory
basedir="$(pwd)"
if [ ! -f "${basedir}/autogen.sh" ]; then
  error "This directory does no contains a autogen.sh file"
  exit 1
fi

# Repo and package name
xbs_pkgname="$(basename $(pwd))-git"
xbs_pkgver="4.8.0"
xbs_repo="1"

# Add additional configure options
xbs_additional_options="--silent --prefix=${xbs_prefix} --disable-static"
xbs_distcheck_options="--enable-gtk-doc --enable-xsltproc --enable-xml2po --enable-gen-doc"

case "$1" in
  "-b" | "--build")
    # Get the build/sub directory
    if [ "$2" -a -d "${basedir}/$2" ]; then
      builddir="${basedir}/$2"
    elif [ "$2" ]; then
      error "$2 is not a subdirectory"
      exit 1
    else
      builddir="${basedir}"
    fi

    # Set the debug compiler flags and temp dir
    tempdir="/tmp/xbs/${xbs_pkgname}"
    export CFLAGS="$xbs_debug_flags"
    export CXXFLAGS="$xbs_debug_flags"
    export LDFLAGS="$LDFLAGS -Wl,--no-add-needed"

    # Run autogen if there is no configure file yet or no subdir is given
    if [ -f ${tempdir}/src/configure -a ${basedir} != ${builddir} -a -d ${tempdir}/src/$2/ ]; then
      # Update the files from the subdirectory
      msg "Updating source files from ./$2"
      res=1 && cp -u ${builddir}/*.{c,h} ${tempdir}/src/$2/
      cd ${tempdir}/src/$2/
    else
      # Cleanup old files and make new copy
      msg "New copy of files of ${xbs_pkgname}"
      rm -Rf ${tempdir}
      mkdir -p ${tempdir}/{pkg,src}
      cp -T -R ${basedir} ${tempdir}/src

      # Run autogen
      msg "Running autogen"
      cd ${tempdir}/src
      res=0 && ${tempdir}/src/autogen.sh --enable-debug=full ${xbs_additional_options} && res=1
    fi

    if [ $res -eq 1 ]; then
      msg "Running make"
      res=0 && make && res=1
      if [ $res -eq 1 ]; then
        # Install the package in the pkg directory
        msg "Installing package in ${tempdir}/pkg"
        res=0 && make DESTDIR=${tempdir}/pkg install &> ${tempdir}/install.log && res=1
        if [ $res -eq 1 ]; then
          # Make pacman package
          create_package ${tempdir} "Debug"

          # Upgrade package
          if [ -f ${tempdir}/*.pkg.tar.gz ]; then
            msg "Updating Pacman package"
            sudo pacman -U --noconfirm ${tempdir}/*.pkg.tar.gz ||
              error "Faild to upgrade the package"
          fi
        else
          msg "Dumping make install output"
          cat ${tempdir}/install.log
          error "Running make install (DESTDIR=${tempdir}/pkg) failed"
        fi
      else
        error "Running make failed"
      fi
    else
      error "Running autogen failed"
    fi
  ;;
  "-o" | "--optimized")
    # Create a temp directory
    tempdir=$(mktemp --tmpdir -d xbs.XXXX 2>/dev/null)
    if [ -z $tempdir ]; then
      error "Failed to create a temporary directory"
    fi

    # Create makepkg directory layout
    mkdir $tempdir/{pkg,src}

    # copy the files into the temp dir
    msg "Copying source files into ${tempdir}/src"
    cp -T -R ${basedir} ${tempdir}/src

    # Run autogen
    msg "Running autogen"
    cd ${tempdir}/src
    res=0 && ${tempdir}/src/autogen.sh --enable-debug=minimum ${xbs_additional_options} && res=1
    if [ $res -eq 1 ]; then
      msg "Running make"
      res=0 && make && res=1
      if [ $res -eq 1 ]; then
        # Install the package in the pkg directory
        msg "Installing package in ${tempdir}/pkg"
        res=0 && make DESTDIR=${tempdir}/pkg install && res=1
        if [ $res -eq 1 ]; then
          # Tidy package
          strip_symbols ${tempdir}/pkg

          # Make pacman package
          create_package ${tempdir} "Optimized"

          # Upgrade package
          if [ -f ${tempdir}/*.pkg.tar.gz ]; then
            msg "Updating Pacman package"
            sudo pacman -U --noconfirm ${tempdir}/*.pkg.tar.gz ||
              error "Faild to upgrade the package"
          fi
        else
          error "Running make install (DESTDIR=${tempdir}/pkg) failed"
        fi
      else
        error "Running make failed"
      fi
    else
      error "Running autogen failed"
    fi

    # Cleanup
    msg "Removing temporary directory ${tempdir}"
    rm -Rf ${tempdir}
  ;;
  "-p" | "--po")
    # Check if we have a po directory
    if [ ! -d ${basedir}/po ]; then
      error "Translation directory ${basedir}/po not found"
    fi

    # Create a temp directory
    tempdir=$(mktemp --tmpdir -d xbs.XXXX 2>/dev/null)
    if [ -z $tempdir ]; then
      error "Failed to create a temporary directory"
    fi

    # copy the files into the temp dir
    msg "Copying source files into ${tempdir}"
    cp -T -R ${basedir} ${tempdir}

    # Run autogen
    msg "Running autogen"
    cd ${tempdir}
    res=0 && ${tempdir}/autogen.sh ${xbs_additional_options} && res=1
    if [ $res -eq 1 ]; then
      # Rebuild the po files
      cd ${tempdir}/po
      make clean # Make sure the pot file is rebuild
      sleep 1
      res=0 && make update-po && res=1
      sleep 1

      if [ $res -eq 1 ]; then
        # Move updated translations back to build directory
        msg "Copying updated translations back to ${basedir}/po"
        cp ${tempdir}/po/*.po ${basedir}/po/
      else
        error "Updating the translations failed"
      fi

      # TODO possibly update po-doc here
    else
      error "Running autogen failed"
    fi

    # Cleanup
    msg "Removing temporary directory ${tempdir}"
    rm -Rf ${tempdir}
  ;;
  "-r" | "--release")
    # Create a temp directory
    tempdir=$(mktemp --tmpdir -d xbs.XXXX 2>/dev/null)
    if [ -z $tempdir ]; then
      error "Failed to create a temporary directory"
    fi

    # copy the files into the temp dir
    msg "Copying source files into ${tempdir}"
    cp -T -R ${basedir} ${tempdir}

    # Don't use fancy optimizations
    unset CFLAGS CXXFLAGS LDFLAGS MAKEFLAGS

    # Run autogen
    msg "Running autogen"
    cd ${tempdir}
    # TODO we actually need the options from Makefile.am
    res=0 && ${tempdir}/autogen.sh ${xbs_distcheck_options} && res=1
    if [ $res -eq 1 ]; then
      if [ "$2" = "--make" ]; then
        # Run make
        res=0 && make && res=1
      else
        res=1
      fi

      if [ $res -eq 1 ]; then
        # Run make distcheck
        res=0 && make distcheck && res=1

        # Give the threads some time to finish
        sleep 2 && sync
        if [ $res -eq 1 ]; then
          # Print sha1sum for release manager
          checksum=$(sha1sum *.tar.bz2 2> /dev/null)
          plain "SHA1 checksum is ${checksum% *}"

          # Copy the tarball to the home directory
          msg "Moving tarball to home directory"
          mv ${tempdir}/*.tar.bz2 $HOME/
        else
          error "Distcheck failed"
        fi
      else
        error "Make failed"
      fi
    else
      error "Running autogen failed"
    fi

    # Cleanup
    res=0 && rm -Rf ${tempdir} &> /dev/null && res=1
    if [ $res -eq 1 ]; then
       msg "Removing temporary directory ${tempdir}"
    else
       error "Removing temporary directory ${tempdir} failed"
    fi
  ;;
  *)
    # print the usage of the build scripts
    echo "Usage:"
    echo "  xbs <option> [sub directory] [additional options for configure]"
    echo
    echo "Option:"
    echo "  -b, --build          Compile and install a debug Pacman package"
    echo "  -o, --optimized      Compile and install an optimized Pacman package"
    echo "  -c, --clean          Clean the temporary build directory"
    echo "  -p, --po             Regenerate the translation files"
    echo "  -r, --release        Create a new release of this package"
    echo "  -g, --git            Housekeeping in $HOME/xfce"
    echo
  ;;
esac

exit 0
